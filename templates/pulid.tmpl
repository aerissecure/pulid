{{ define "pulid" }}


// NEW GUY!

{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

// TODO: See if that if statement in tabletoprefix actually excludes
// nodes without a PULID prefix. If it does, we need to builda  slice of the
// excluded here and panic on it.
// func init() {
// 	missing := []string{
// 	}
// }

var TableToPrefix = map[string]string{
	{{- range $node := $.Nodes }}
		{{- if $annotation := $node.Annotations.PULID }}
			{{ $node.Package }}.Table: "{{ $annotation.Prefix }}",
		{{- end }}
	{{- end }}
}

// prefixMap maps PULID prefixes to table names.
// 
// This map also ensures all table prefixes are unique since duplicate
// keys in a map literal case a build error.
var PrefixToTable = map[string]string{
	{{- range $node := $.Nodes }}
		{{- if $annotation := $node.Annotations.PULID }}
			"{{ $annotation.Prefix }}": {{ $node.Package }}.Table,
		{{- end }}
	{{- end }}
}

// IDToType maps a pulid.ID to the underlying table.
func IDToType(ctx context.Context, id pulid.ID) (string, error) {
	fields := strings.Split(string(id), ":")
	if len(fields) < 2 {
		return "", fmt.Errorf("IDToType: id is missing prefix delimiter")
	}

	if len(fields[0]) < 1 {
		return "", fmt.Errorf("IDToType: prefix is too short")
	}
	prefix := fields[0]
	typ := PrefixToTable[prefix]
	if typ == "" {
		return "", fmt.Errorf("IDToType: could not map prefix '%s' to a type", prefix)
	}
	return typ, nil
}

{{ end }}
